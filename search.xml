<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构往年真题</title>
      <link href="2021/08/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BE%80%E5%B9%B4%E7%9C%9F%E9%A2%98/"/>
      <url>2021/08/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BE%80%E5%B9%B4%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构往年真题"><a href="#数据结构往年真题" class="headerlink" title="数据结构往年真题"></a>数据结构往年真题</h1><p><strong>树遍历(push pop可以直接用)</strong> </p><p><strong>图</strong></p><p>**查找(二分查找,左右) **</p><p><strong>排序</strong>(冒泡)</p><h2 id="21年"><a href="#21年" class="headerlink" title="21年"></a>21年</h2><p>1.一份电文中有a,b,c,d,e五个字符,它们的出现频率分别为60,50,40,30,20,请问它们用二进制编码至少需要多少位二进制位数.并写出计算过程及其原因</p><p>哈夫曼树</p><h3 id="2-将有序数组转换为二叉搜索树"><a href="#2-将有序数组转换为二叉搜索树" class="headerlink" title="2.将有序数组转换为二叉搜索树"></a>2.将有序数组转换为二叉搜索树</h3><p>题目描述:<br>给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。</p><p>高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p><p><strong>二叉查找树(BST)：</strong>对于任意一个结点，左边的结点均小于它，右边的结点均大于它</p><p>模式识别:树通常具有子结构,一旦涉及解决子问题,考虑用递归解决</p><p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [-10,-3,0,5,9]</span><br><span class="line">输出：[0,-3,9,-10,null,5]</span><br><span class="line">解释：[0,-10,5,null,-3,null,9] 也将被视为正确答案：</span><br></pre></td></tr></table></figure><p>思路:<br>选取数组中的一个元素作为根节点,该元素左侧的元素递归构成左子树,右侧的同理<br>选取数组中间的元素,如果数组长度是奇数，则根节点的选择是唯一的，如果数组长度是偶数，则可以选择中间位置左边的数字作为根节点或者选择中间位置右边的数字作为根节点，选择不同的数字作为根节点则创建的平衡二叉搜索树也是不同的。</p><p><strong>递归三部曲</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">确定递归函数参数以及返回值</span><br><span class="line">确定终止条件</span><br><span class="line">确定单层递归的逻辑</span><br></pre></td></tr></table></figure><ul><li>确定递归函数参数以及返回值</li></ul><p>参数就是根节点指针，以及要插入元素,递归函数的返回类型为节点类型TreeNode *</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TreeNode* insertIntoBST(TreeNode* root, int val) </span><br><span class="line">&#x2F;&#x2F;将二叉树传入函数,只需将二叉树的头结点的指针传入函数</span><br></pre></td></tr></table></figure><ul><li>确定终止条件</li></ul><p>终止条件就是找到遍历的节点为null的时候，就是要插入节点的位置了，并把插入的节点返回。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (root &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">    TreeNode* node &#x3D; new TreeNode(val);</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把添加的节点返回给上一层，就完成了父子节点的赋值操作了，详细再往下看。</p><ul><li>确定单层递归的逻辑</li></ul><p>此时要明确，需要遍历整棵树么？</p><p>别忘了这是搜索树，遍历整颗搜索树简直是对搜索树的侮辱，哈哈。</p><p>搜索树是有方向了，可以根据插入元素的数值，决定递归方向。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (root-&gt;val &gt; val) root-&gt;left &#x3D; insertIntoBST(root-&gt;left, val);</span><br><span class="line">if (root-&gt;val &lt; val) root-&gt;right &#x3D; insertIntoBST(root-&gt;right, val);</span><br><span class="line">return root;</span><br></pre></td></tr></table></figure><p><strong>「到这里，大家应该能感受到，如何通过递归函数返回值完成了新加入节点的父子关系赋值操作了，下一层将加入节点返回，本层用root-&gt;left或者root-&gt;right将其接住」</strong>。</p><p>整体代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* insertIntoBST(TreeNode* root, int val) &#123;</span><br><span class="line">        if (root &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">            TreeNode* node &#x3D; new TreeNode(val);</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">        if (root-&gt;val &gt; val) root-&gt;left &#x3D; insertIntoBST(root-&gt;left, val);</span><br><span class="line">        if (root-&gt;val &lt; val) root-&gt;right &#x3D; insertIntoBST(root-&gt;right, val);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看出代码并不复杂。</p><p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/solution/dai-ma-sui-xiang-lu-dai-ni-xue-tou-er-ch-9876/">https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/solution/dai-ma-sui-xiang-lu-dai-ni-xue-tou-er-ch-9876/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高数</title>
      <link href="2021/07/19/%E9%AB%98%E6%95%B0/"/>
      <url>2021/07/19/%E9%AB%98%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h1><h2 id="一-数列极限"><a href="#一-数列极限" class="headerlink" title="一.数列极限"></a>一.数列极限</h2><p><strong>极限</strong>,从通俗的意义上讲,是一个<strong>无限趋近的过程</strong></p><p>注:数列极限中的无穷特指正无穷</p><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p><strong>ε-N语言</strong></p><p>n趋于无穷时xn=a</p><p>&lt;=&gt;</p><p>任意ε&gt;0,存在N∈N+,当n&gt;N时,恒有|xn-a|&lt;ε</p><h4 id="2-性质"><a href="#2-性质" class="headerlink" title="2.性质"></a>2.性质</h4><p>1).唯一性,极限若存在便是唯一的</p><p>2).有界性,若极限存在,则有界</p><p>3).保号性,极限大于0,则当n&gt;N时an大于0<br>推论 反之成立条件是把大于换为大于等于 </p><h4 id="3-运算规则"><a href="#3-运算规则" class="headerlink" title="3.运算规则"></a>3.运算规则</h4><p>设an,bn极限都存在且为a,b</p><p>1).线性加减</p><p>2).两个数列相乘的极限等于极限相乘</p><p>3)相除,参考2),但是要求分母不等于0</p><h4 id="4-夹逼准则"><a href="#4-夹逼准则" class="headerlink" title="4.夹逼准则"></a>4.夹逼准则</h4><h4 id="5-单调有界准则"><a href="#5-单调有界准则" class="headerlink" title="5.单调有界准则"></a>5.单调有界准则</h4><p>单调数列必有极限,即若数列单调增加或减少且有上界或下界,则数列极限存在</p><p>证明数列极限存在主要思路,定义</p><p>求数列极限思路:夹逼准则,单调有界准则,运算规则</p><h2 id="二-函数极限及其连续性"><a href="#二-函数极限及其连续性" class="headerlink" title="二.函数极限及其连续性"></a>二.函数极限及其连续性</h2><h3 id="一-函数极限"><a href="#一-函数极限" class="headerlink" title="(一).函数极限"></a>(一).函数极限</h3><h4 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h4><p>函数极限,ε-δ语言</p><h4 id="2-性质-1"><a href="#2-性质-1" class="headerlink" title="2.性质"></a>2.性质</h4><p><strong>唯一性</strong> 若极限存在便唯一</p><p><strong>局部有界性</strong> 局部是因为在邻域内讨论</p><p><strong>局部保号性</strong> 极限可以推函数值 但是反之要加等号</p><h4 id="3-运算规则-1"><a href="#3-运算规则-1" class="headerlink" title="3.运算规则"></a>3.运算规则</h4><p>若两个函数存在极限A,B</p><p>1.线性性质</p><p>2.相乘</p><p>3.相除,注意分母不为0</p><h4 id="4-夹逼准则-1"><a href="#4-夹逼准则-1" class="headerlink" title="4.夹逼准则"></a>4.夹逼准则</h4><h4 id="5-洛必达法则"><a href="#5-洛必达法则" class="headerlink" title="5.洛必达法则"></a>5.洛必达法则</h4><p>法则一:x趋于a或无穷,函数f(x)和F(x)都趋于0     零比零    </p><p>法则二:x趋于a或无穷,函数f(x)和F(x)都趋于无穷大     无穷比无穷</p><h4 id="6-泰勒公式"><a href="#6-泰勒公式" class="headerlink" title="6.泰勒公式"></a>6.泰勒公式</h4><p>sinx cosx arcsinx tanx arctanx </p><h4 id="7-海涅定理"><a href="#7-海涅定理" class="headerlink" title="7.海涅定理"></a>7.海涅定理</h4><p>建立函数极限与与数列极限的关系</p><h4 id="8-无穷小比阶"><a href="#8-无穷小比阶" class="headerlink" title="8.无穷小比阶"></a>8.无穷小比阶</h4><p>函数极限趋于0</p><h3 id="二-函数的连续与间断"><a href="#二-函数的连续与间断" class="headerlink" title="(二).函数的连续与间断"></a>(二).函数的连续与间断</h3><h4 id="1-连续点的定义"><a href="#1-连续点的定义" class="headerlink" title="1.连续点的定义"></a>1.连续点的定义</h4><p>f(x)在点x0 的某一邻域内有定义,在x0点处函数值等于极限值</p><h4 id="2-间断点的定义"><a href="#2-间断点的定义" class="headerlink" title="2.间断点的定义"></a>2.间断点的定义</h4><p>在x0处,函数值不等于极限值</p><h4 id="3-间断点的分类"><a href="#3-间断点的分类" class="headerlink" title="3.间断点的分类"></a>3.间断点的分类</h4><p>1).第一类间断点</p><p>可去间断点:只是函数值不等于极限值(函数可以在该点无定义)</p><p>跳跃间断点:左极限不等于右极限(前提是左右极限都存在)</p><p>2).第二类间断点</p><p>无穷间断点:在该点处函数极限趋于无穷 eg.y=1/x(x=0)</p><p>震荡间断点:在该点处函数极限震荡不存在 eg.y=sin(1/x) (x=0)</p><h2 id="三-一元函数微分学的的概念与计算"><a href="#三-一元函数微分学的的概念与计算" class="headerlink" title="三.一元函数微分学的的概念与计算"></a>三.一元函数微分学的的概念与计算</h2><h3 id="1-导数"><a href="#1-导数" class="headerlink" title="1.导数"></a>1.导数</h3><p>导数定义的两个形式</p><h3 id="2-微分"><a href="#2-微分" class="headerlink" title="2.微分"></a>2.微分</h3><h2 id="一元微分学的几何应用"><a href="#一元微分学的几何应用" class="headerlink" title="一元微分学的几何应用"></a>一元微分学的几何应用</h2><h3 id="极值与最值概念"><a href="#极值与最值概念" class="headerlink" title="极值与最值概念"></a>极值与最值概念</h3><h4 id="极值"><a href="#极值" class="headerlink" title="极值"></a>极值</h4><p>极大值：x0的某个邻域内任意一点，均有fx&lt;=fx0  </p><p>极小值反之</p><h4 id="最值"><a href="#最值" class="headerlink" title="最值"></a>最值</h4><p>最大值：在定义域内</p><h3 id="单调性与极值的判别"><a href="#单调性与极值的判别" class="headerlink" title="单调性与极值的判别"></a>单调性与极值的判别</h3><p>单调性判别：在区间I上，fx导&gt;0，则称单调增加，反之单调减少</p><p>一阶可导点是极值点的必要条件：fx在x=x0处可导，且在点x0处取的极值，则必有fx0导=0</p><p>判别极值的三充分条件：从左邻域到右邻域变号；fx导=0，fx二阶导不等于0；fxn阶导=0，fx（n+1）阶导不等于0.</p><h3 id="凹凸性与拐点的概念"><a href="#凹凸性与拐点的概念" class="headerlink" title="凹凸性与拐点的概念"></a>凹凸性与拐点的概念</h3><h3 id="凹凸性与拐点的判别"><a href="#凹凸性与拐点的判别" class="headerlink" title="凹凸性与拐点的判别"></a>凹凸性与拐点的判别</h3><h3 id="渐近线"><a href="#渐近线" class="headerlink" title="渐近线"></a>渐近线</h3><h3 id="最值与取值范围"><a href="#最值与取值范围" class="headerlink" title="最值与取值范围"></a>最值与取值范围</h3><h3 id="作函数图形"><a href="#作函数图形" class="headerlink" title="作函数图形"></a>作函数图形</h3><h2 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h2><p><strong>无穷级数简称级数,可以理解为无穷数列之和,u1+u2+…un,简记为\sum{un}</strong></p><p>注:级数中的无穷指的是正无穷</p><h3 id="常数项级数"><a href="#常数项级数" class="headerlink" title="常数项级数"></a>常数项级数</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>常数项级数就是级数通项un为常数的级数.借助部分和数列{Sn},再借助极限工具,也就是研究n取无穷时Sn等于un之和</p><h4 id="敛散性"><a href="#敛散性" class="headerlink" title="敛散性"></a>敛散性</h4><p>若n取无穷时Sn=S,则称该级数收敛,并称S为该收敛级数的和<br>若n取无穷时Sn不存在或者为正负无穷,,则称该级数是发散的</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>1.收敛级数的线性性质</p><p>2.改变(不论加减)收敛级数任意有限项,不会改变敛散性</p><p>3.若级数收敛,则n取无穷时un=0</p><h3 id="敛散性判别方法"><a href="#敛散性判别方法" class="headerlink" title="敛散性判别方法"></a>敛散性判别方法</h3><h4 id="正项级数敛散性判别方法"><a href="#正项级数敛散性判别方法" class="headerlink" title="正项级数敛散性判别方法"></a>正项级数敛散性判别方法</h4><p>1.收敛原则</p><p>正项级数收敛的充要条件是部分和数列Sn有界</p><p>2.比较判别法</p><p>3.比较判别法的极限形式</p><p>4.比值判别法</p><p>5.根值判别法</p><h4 id="交错级数"><a href="#交错级数" class="headerlink" title="交错级数"></a>交错级数</h4><p><em>莱布尼茨判别法</em></p><p>若{un}单调不增且n取无穷时un=0(性质3),则该级数收敛</p><h4 id="任意项级数"><a href="#任意项级数" class="headerlink" title="任意项级数"></a>任意项级数</h4><p>定理:若任意项级数绝对收敛则该级数必收敛(绝对收敛,条件收敛,收敛,发散)</p><h3 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>一般项是un(x)是n次幂函数,则称该级数为幂级数</p><h4 id="收敛点与发散点"><a href="#收敛点与发散点" class="headerlink" title="收敛点与发散点"></a>收敛点与发散点</h4><p>指的是一个点x0,取x0时级数(无穷数列之和)发散或者收敛</p><h4 id="阿贝尔定理"><a href="#阿贝尔定理" class="headerlink" title="阿贝尔定理"></a>阿贝尔定理</h4><p>当幂级数在x1点收敛时,对于满足|x|&lt;|x1|的一切x,幂级数绝对收敛</p><p>当幂级数在x2点发散时,对于满足|x|&gt;|x2|的一切x,幂级数发散</p><h4 id="收敛域求法"><a href="#收敛域求法" class="headerlink" title="收敛域求法"></a>收敛域求法</h4><p>1.n趋于无穷时|a(n+1)/a(n)|=ρ,只有ρ不等于0时存在半径R=1/ρ,至此求得收敛半径开区间(-R,R)</p><p>2.讨论端点值-R与R,也就是单独讨论幂级数在x=-R,R处的敛散性</p><h3 id="幂级数求和函数"><a href="#幂级数求和函数" class="headerlink" title="幂级数求和函数"></a>幂级数求和函数</h3><p>讨论前提是在<strong>收敛域上</strong>    常数项级数,交错级数,任意项级数没有讨论和函数</p><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>在收敛域上,记S(x)为幂级数的和函数</p><h4 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则"></a>运算法则</h4><p>线性运算</p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><p>1.若幂级数的和函数在其收敛区间上连续,且如果幂级数在收敛区间端点x=R处收敛,则和函数S(x)在(-R,R]上连续,x=-R同理</p><p>由端点收敛推收敛域开闭情况</p><p>2.逐项积分后得到的幂级数与原级数有相同的收敛半径,但是收敛半径可能会扩大</p><p>3.逐项求导后得到的幂级数与原级数有相同的收敛半径,但是收敛半径可能会缩小</p><p>逐项求导/积分,收敛半径不变,收敛域可能变小/变大</p><h4 id="重要展开式"><a href="#重要展开式" class="headerlink" title="重要展开式"></a>重要展开式</h4><h3 id="函数展开成幂级数"><a href="#函数展开成幂级数" class="headerlink" title="函数展开成幂级数"></a>函数展开成幂级数</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><p>1.泰勒级数,麦克劳林级数</p><h4 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h4><p>直接带入</p><p>间接法</p><h3 id="特殊地"><a href="#特殊地" class="headerlink" title="特殊地"></a>特殊地</h3><p>1.<strong>等比级数</strong></p><p>也叫几何级数,对于公比q:</p><p>|q|&gt;=1时等比级数时发散的,也就是n趋于无穷时Sn不存在</p><p>|q|&lt;1时等比级数收敛,其和为a/(1-q)</p><p>2.<strong>p级数</strong></p><p>通项un=1/n^p,</p><p>p&lt;=1时 发散</p><p>p&gt;1时 收敛</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2021/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="一-绪论"><a href="#一-绪论" class="headerlink" title="一.绪论"></a>一.绪论</h2><h3 id="1-数据类型与抽象数据类型"><a href="#1-数据类型与抽象数据类型" class="headerlink" title="1.数据类型与抽象数据类型"></a>1.数据类型与抽象数据类型</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="1-C-C-语言的数据类型"><a href="#1-C-C-语言的数据类型" class="headerlink" title="1).C/C++语言的数据类型"></a>1).C/C++语言的数据类型</h4><p>1.基本数据类型</p><p>2.指针类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i,*p;</span><br><span class="line">其中i是整型变量,p是指针变量(它用于存放某个整形变量的地址)</span><br><span class="line">表达式&amp;i表示变量i的地址,即取址,将p指向整型变量i的运算为p&#x3D;&amp;i</span><br><span class="line"></span><br><span class="line">对于指针变量p,表达式*p是取p所指变量的值,即取值</span><br><span class="line">例如int i&#x3D;2,*p&#x3D;&amp;i;</span><br><span class="line">printf(&quot;%d\n&quot;,*p);</span><br><span class="line">输出2</span><br></pre></td></tr></table></figure><p>3.数组类型</p><p>数组下标最小值总是0</p><p>4.结构体类型</p><p>5.共用体类型</p><h4 id="2-存储空间的分布"><a href="#2-存储空间的分布" class="headerlink" title="2).存储空间的分布"></a>2).存储空间的分布</h4><p>(1).静态存储空间分配方式</p><p>例如 int a[10];</p><p>(2).动态存储空间分配方式</p><p>例如 malloc()/free()函数对</p><h3 id="2-抽象数据类型-ADT"><a href="#2-抽象数据类型-ADT" class="headerlink" title="2).抽象数据类型(ADT)"></a>2).抽象数据类型(ADT)</h3><p>特征:数据抽象,数据封装</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>重点在于<strong>链表</strong>的操作</p><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>线性表(linear list)是具有相同特性的数据元素的一个有限序列</p><h3 id="2-线性表的顺序存储结构"><a href="#2-线性表的顺序存储结构" class="headerlink" title="2.线性表的顺序存储结构"></a>2.线性表的顺序存储结构</h3><p>简称为顺序表</p><p>结构体SqList,也就是定义了数据类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef syruct&#123;</span><br><span class="line">ElemType data[MaxSize];&#x2F;&#x2F;存放线性表中的元素</span><br><span class="line">int length;&#x2F;&#x2F;存放线性表的长度</span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><h3 id="3-顺序表的连式存储结构"><a href="#3-顺序表的连式存储结构" class="headerlink" title="3.顺序表的连式存储结构"></a>3.顺序表的连式存储结构</h3><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><p>之所以叫前序、中序、后序遍历，是因为根节点在前、中、后。</p><p>递归时调用递归函数的顺序就是按照遍历顺序</p><h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><p>描述：</p><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong> 遍历。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For example:</span><br><span class="line">Given binary tree &#123;1,null,2,3&#125;</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line">return [1,2,3].</span><br></pre></td></tr></table></figure><p>原则：根左右</p><p>思路：</p><p>从根节点开始，向左寻找一直找到左侧尽头然后从左侧尽头开始向右寻找 然后回溯上一节点然后再找右侧子节点，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct TreeNode &#123;</span><br><span class="line">     int val;</span><br><span class="line">     TreeNode *left;</span><br><span class="line">     TreeNode *right;</span><br><span class="line">     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#x2F;&#x2F;这是允许我们用 TreeNode node(int x)的法式把val赋值为x，left，right为NULL。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vector&lt;int*&gt; a</span><br><span class="line">a是一个vector容器，容器里面放的都是int类型的指针，因此 a[0] 就是一个int类型的指针</span><br><span class="line">vector&lt;int*&gt;::iterator p &#x3D; a.begin();</span><br><span class="line">*p 也是一个int类型的指针</span><br><span class="line"></span><br><span class="line">vector表示这个是一个vector容器，可自动增加长度的动态数组（相当于一个杯子），int*表示的是容器里装的是int型指针（杯子里装的水） a表示这个容器的名字 （比如这个杯子叫保温杯）</span><br><span class="line"></span><br><span class="line">null与nullptr</span><br><span class="line">在编译器进行解释程序时，NULL会被直接解释成0</span><br><span class="line">nullptr在C++11中就是代表空指针，不能被转换成数字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree;</span><br><span class="line">        preorder(root, tree);</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; tree)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        tree.push_back(root-&gt;val);</span><br><span class="line">        preorder(root-&gt;left,tree);</span><br><span class="line">        preorder(root-&gt;right,tree);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [1,null,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">inorder(root-&gt;left,tree);</span><br><span class="line">tree.push_back(root-&gt;val);</span><br><span class="line">inorder(root-&gt;right,tree);</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">postorder(root-&gt;left,tree);</span><br><span class="line">postorder(root-&gt;right,tree);</span><br><span class="line">tree.push_back(root-&gt;val);</span><br></pre></td></tr></table></figure><p>后序遍历的结果与先序遍历右子树的结果是倒序关系</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="数组与矩阵"><a href="#数组与矩阵" class="headerlink" title="数组与矩阵"></a>数组与矩阵</h4><p>数组是由一组相同类型的数据元素构成的有限序列，访问数据元素的方式是使用元素各自的序号进行访问，也就是下标。数组它本身是线性表的推广，一维数组就是一个向量形式的线性表，二维数组就是由一维数组组成的线性表。</p><h4 id="数组的顺序存储"><a href="#数组的顺序存储" class="headerlink" title="数组的顺序存储"></a>数组的顺序存储</h4><p>因为它是数组，数据的存储方式分为顺序存储和链式存储两种，数组一旦被定义，他的维数和维界就已固定，除结构的初始化和销毁外，数组只会有存取元素和修改元素的操作，不存在插入和删除操作，所以数组适合用顺序存储。</p><h4 id="数组存放在内存中的映射关系"><a href="#数组存放在内存中的映射关系" class="headerlink" title="数组存放在内存中的映射关系"></a>数组存放在内存中的映射关系</h4><p>数组可以是多维的，但是内存空间却是一维的，所以我们就要把多维数组通过一定的映射顺序把它变成一维的，然后存储到内存空间之中。</p><p>　　在大多数高级编程语言中，多维数组在内存中通常有两种不同的顺序存储方式，<strong>按行优先顺序存储</strong> 和 <strong>按列优先顺序存储</strong>。</p><h4 id="地址计算"><a href="#地址计算" class="headerlink" title="地址计算"></a>地址计算</h4><p>地址计算的意思就是给定数组下标，求在一维内存空间的地址，从而取出数据。</p><p>我们先来看一维数组的地址计算</p><p>　　一维数组内的元素只有一个下标，存储方法和普通的线性表一样。</p><p>　　如一维数组 A = [a1,a2,a3,……ai,………,an]，每个元素占用size个存储单元（就是内存大小），那么元素ai的存储地址为 A[0]的位置 + (i-1)*size </p><p>再来看二维数组的地址计算</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以二维数组A[m][n]为例，首元素为A[0][0].</span><br><span class="line">数组中任意元素A[i][j]的地址为：A[0][0]的位置 + （n * (i-1) + (j-1)）* size；</span><br><span class="line">公式的内容就是求出格子数，乘以每个格子所占用的存储单元，再加上首地址。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">比如：一个5行4列的二维数组A，按行存储，其中每个元素占2个存储单元，首元素地址是1000，求第3行第2列的元素在内存中的地址。</span><br><span class="line"></span><br><span class="line">把参数套进公式中，答案 &#x3D; 1000 + (4 * (3-1) + (2-1)) * 2 &#x3D; 1018;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Orig1nation/Photo/master/Note/20210717160707.jpg"></p><p>参考<a href="https://www.cnblogs.com/fengyumeng/p/11586247.html">https://www.cnblogs.com/fengyumeng/p/11586247.html</a></p><h2 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h2><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记</title>
      <link href="2021/05/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><h3 id="递归模型"><a href="#递归模型" class="headerlink" title="递归模型"></a>递归模型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fun(<span class="number">1</span>)=<span class="number">1</span>                    (<span class="number">1</span>)   </span><br><span class="line">fun(n)=n*fun(n<span class="number">-1</span>)     n&gt;<span class="number">1</span>   (<span class="number">2</span>) </span><br><span class="line">   </span><br><span class="line">其中，第一个式子给出了递归的终止条件，第二个式子给出了fun(n)的值与fun(n<span class="number">-1</span>)的值之间的关系。</span><br><span class="line"> 我们把第一个式子称为递归出口，把第二个式子称为递归体</span><br></pre></td></tr></table></figure><h3 id="递归算法的执行过程"><a href="#递归算法的执行过程" class="headerlink" title="递归算法的执行过程"></a>递归算法的执行过程</h3><p>一个正确的递归程序虽然每次调用的是相同的子程序，但它的参量、输入数据等均有变化，并且在正常的情况下，随着调用的不断深入，必定会出现调用到某一层的函数时，不再执行递归调用而终止函数的执行，遇到递归出口便是这种情况。</p><p>递归调用是函数嵌套调用的一种特殊情况，即它是调用自身代码。因此，也可以把每一次递归调用理解成调用自身代码的一个复制件。由于每次调用时，它的参量和局部变量均不相同，因而也就保证了各个复制件执行时的独立性。</p><p>　但这些调用在内部实现时，并不是每次调用真的去复制一个复制件存放到内存中，而是采用代码共享的方式，也就是它们都是调用同一个函数的代码，而系统为每一次调用开辟一组存储单元，用来存放本次调用的返回地址以及被中断的函数的参量值。<br>　　<strong>这些单元以栈的形式存放，每调用一次进栈一次，当返回时执行出栈操作，把当前栈顶保留的值送回相应的参量中进行恢复，并按栈顶中的返回地址，从断点继续执行。</strong></p><p>归纳起来，递归调用的实现是分两步进行的，第一步是分解过程，即用递归体将“大问题”分解成“小问题”，直到递归出口为止，然后进行第二步的求值过程，即已知“小问题”，计算“大问题”。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Fibonacci数列定义为：</span><br><span class="line">Fib(n)=<span class="number">1</span>n=<span class="number">1</span></span><br><span class="line">Fib(n)=<span class="number">1</span>n=<span class="number">2</span></span><br><span class="line">Fib(n)=Fib(n<span class="number">-1</span>)+Fib(n<span class="number">-2</span>)n&gt;<span class="number">2</span></span><br><span class="line"></span><br><span class="line">对应的递归算法如下</span><br><span class="line"><span class="keyword">int</span> Fib(<span class="keyword">int</span> n)</span><br><span class="line">&#123;　 <span class="keyword">if</span> (n==<span class="number">1</span> || n==<span class="number">2</span>)</span><br><span class="line">　　　　<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">　　<span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Fib(n<span class="number">-1</span>)+Fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>FIb(5)的递归树如图所示</p><p><img src="https://raw.githubusercontent.com/Orig1nation/Photo/master/Note/20210506095503.png"></p><p>由Fib(5)分解为Fib(4)+Fib(3)<br>由Fib(4)分解为Fib(3)+Fib(2)<br>   Fib(3)分解为Fib(2)+Fib(1)<br>　Fib(2)和Fib(1)的求值结果均为1，<br>　从而求出Fib(3)的值为2，Fib(2)的求值为结果为1，从而求出Fib(4)的值为3。类似地求出Fib(3)的值为2，所以最终Fib(5)的值为5（栈中最后一个元素的函数值）。</p><p>在递归函数执行时，其形参会随着递归调用发生变化，但每次调用后会恢复为调用前的形参，将递归函数的非引用型形参的取值称为状态<br>递归函数的引用型形参在执行后会回传给实参，有时类似全局变量，不作为状态的一部分，在调用过程中状态会发生变化，而一次调用后会自动恢复为调用前的状态。 </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;　 <span class="keyword">if</span> (n&lt;<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">　　<span class="keyword">else</span></span><br><span class="line">　　&#123;<span class="built_in">printf</span>(<span class="string">&quot;调用f(%d)前,n=%d\n&quot;</span>,n<span class="number">-1</span>,n);</span><br><span class="line">f(n<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;调用f(%d)后:n=%d\n&quot;</span>,n<span class="number">-1</span>,n);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用f(3)前,n=4</span></span><br><span class="line"><span class="comment">调用f(2)前,n=3</span></span><br><span class="line"><span class="comment">调用f(1)前,n=2</span></span><br><span class="line"><span class="comment">调用f(0)前,n=1</span></span><br><span class="line"><span class="comment">调用f(0)后:n=1</span></span><br><span class="line"><span class="comment">调用f(1)后:n=2</span></span><br><span class="line"><span class="comment">调用f(2)后:n=3</span></span><br><span class="line"><span class="comment">调用f(3)后:n=4</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Orig1nation/Photo/master/Note/20210506095939.png"></p><p>在上述递归函数f中，状态为（n），输出框旁的数字表示输出顺序，虚线表示本次递归调用执行完后返回，从中看到<strong>每次递归调用后状态都恢复为调用前的状态。</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> &amp;m)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">if</span> (n&lt;<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; <span class="built_in">printf</span>(<span class="string">&quot;调用f(%d,%d)前,n=%d,m=%d\n&quot;</span>,n<span class="number">-1</span>,m<span class="number">-1</span>,n,m);</span><br><span class="line">n--; m--;</span><br><span class="line">f(n<span class="number">-1</span>,m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;调用f(%d,%d)后:n=%d,m=%d\n&quot;</span>,n<span class="number">-1</span>,m<span class="number">-1</span>,n,m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">int</span> n=<span class="number">4</span>,m=<span class="number">4</span>;</span><br><span class="line">f(n,m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">  调用f(3,3)前,n=4,m=4</span></span><br><span class="line"><span class="comment">  调用f(1,2)前,n=2,m=3</span></span><br><span class="line"><span class="comment">  调用f(0,1)后:n=1,m=2</span></span><br><span class="line"><span class="comment">  调用f(2,1)后:n=3,m=2</span></span><br><span class="line"><span class="comment">  在这里n(非引用型形参)为状态，&amp;m(引用型形参)只是对其地址的引用</span></span><br><span class="line"><span class="comment">  状态会在递归完成时恢复</span></span><br><span class="line"><span class="comment">  f(4,4)-&gt;(3,3)-&gt;f(2,3)-&gt;(1,2)-&gt;f(0,2)</span></span><br><span class="line"><span class="comment">  -&gt;(1,2)-&gt;f(0,1)-&gt;(3,2)-&gt;f(2,1)-&gt;(4,2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*如果将void f(int n,int &amp;m) 改为void f(int n,int m)</span></span><br><span class="line"><span class="comment">   运行结果</span></span><br><span class="line"><span class="comment">   调用f(3,3)前,n=4,m=4</span></span><br><span class="line"><span class="comment">   调用f(1,2)前,n=2,m=3</span></span><br><span class="line"><span class="comment">   调用f(0,1)后:n=1,m=2</span></span><br><span class="line"><span class="comment">   调用f(2,2)后:n=3,m=3</span></span><br><span class="line"><span class="comment">   f(4,4)-&gt;(3,3)-&gt;f(2,3)-&gt;(1,2)-&gt;f(0,2)</span></span><br><span class="line"><span class="comment">  -&gt;(1,2)-&gt;f(0,1)-&gt;(3,3)-&gt;f(2,2)-&gt;(4,4)</span></span><br></pre></td></tr></table></figure><p>　　（1）每递归调用一次，就需进栈一次，最多的进栈元素个数称为递归深度，当n越大，递归深度越深，开辟的栈空间也越大。<br>　　（2）每当遇到递归出口或完成本次执行时，需退栈一次，并恢复参量值，当全部执行完毕时，栈应为空。</p><p>引用的例子</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> &amp;m,<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> temp; </span><br><span class="line">temp=m; </span><br><span class="line">m=n; </span><br><span class="line">n=temp; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">5</span>,b=<span class="number">10</span>; </span><br><span class="line">f(a,b); </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; &#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果 10 10</span></span><br><span class="line"><span class="comment">&amp;m是引用，</span></span><br><span class="line"><span class="comment">函数内的m与外部的a是等效的，m=n时，a=10了。</span></span><br><span class="line"><span class="comment">n不是引用，函数内的n是b的一个拷贝，n改了，b不变。</span></span><br></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>1.</p><h4 id="2-对于一个采用字符数组存放的字符串str，设计一个递归算法求其字符个数"><a href="#2-对于一个采用字符数组存放的字符串str，设计一个递归算法求其字符个数" class="headerlink" title="2.对于一个采用字符数组存放的字符串str，设计一个递归算法求其字符个数"></a>2.对于一个采用字符数组存放的字符串str，设计一个递归算法求其字符个数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlength</span><span class="params">(<span class="keyword">char</span> *str)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p=str;</span><br><span class="line"><span class="keyword">if</span>(*p==<span class="string">&#x27;\0&#x27;</span>)<span class="comment">//判断第一个字符是否为/0,若不是再判断</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//return 0表示程序正常退出</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> strlength(str+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*strlength(123)</span></span><br><span class="line"><span class="comment">strlength(23)+1</span></span><br><span class="line"><span class="comment">strlength(3)+1+1</span></span><br><span class="line"><span class="comment">strlength(/0)+1+1+1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">20</span>]; <span class="comment">//定义了一个局部字符数组</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;字符串长度为&quot;</span>&lt;&lt;strlength(str)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义字符指针需要配套malloc函数为其申请一块内存空间</span></span><br><span class="line"><span class="comment">定义了字符指针p指向str</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *str 和 <span class="keyword">char</span> str[]的区别**</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">get_str</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[] = &#123;<span class="string">&quot;abcd&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> char str[] = “abcd”;定义了一个局部字符数组，返回它的地址肯定是一个已经释放了的空间的地址。 此函数返回的是内部一个局部字符数组str的地址，且函数调用完毕后 此数组被销毁，所以返回的指针也就指向一块被销毁的内存，这种写法得不到想要的结果，是错误的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">get_str</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = &#123;<span class="string">&quot;abcd&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>char* str = {“abcd”};表示先定义个字符串常量，并将其地址赋给str。<br> 此函数返回的是字符串常量的地址，而像这种字符串都是属于全局的，在编译的时候就已经分配了内存了，只有程序退出的时候才会被销毁，所以返回它的地址是没有问题的，但是你最好返回常量指针，因为你不能去改变字符串常量的值。</p><p> 这个str就在栈里面，但后面的字符串在常量区，函数返回的时候，先将常量区的地址返回，然后作用域结束，释放str在栈里面的空间。。</p><ol><li><p>const char str[] = “abcd”;        <em>//abc存储在堆栈中</em></p></li><li><p>const char *str = “abcd”;         <em>//abc存储在静态存储区</em></p><p>准确的说，上面两个“abc”都是存储在静态存储区，即常量区。常量区是可读不可写的。所以任何试图对常量区进行写的操作都是非法的，当然了，这也不是一定不可写的，你可以采取某种渠道改变常量区的内存属性，</p><p>那么为什么str[] = “abc”;   可以写呢？  答案就在str[] = “abc”；会有一个额外的拷贝过程，即把常量区的 “abc”拷贝到栈内存去，所以就可以写了。</p></li></ol><p>  <strong>总结：</strong><br>所有以” “或’ ‘包含的字符、字符串都是常量，应该是存储在堆上。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">char</span> *str = <span class="string">&quot;xxxxx&quot;</span>，<span class="comment">//str指向文字常量区中该字符串的地址，“xxxxx”是全局的，但str仍然是局部变量。</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">char</span> str[] = <span class="string">&quot;xxxxx&quot;</span>，<span class="comment">//str在栈上申请空间，将文字常量区的字符串内容复制进来，所以&quot;xxxxx&quot;变成局部变量。</span></span><br></pre></td></tr></table></figure><p><strong>首先，数组和指针是不同的数据类型，有本质的区别：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">char</span> str[] = <span class="string">&quot;abcd&quot;</span>;         <span class="comment">//sizeof(str) == 5 * sizeof(char)</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">char</span> * str = <span class="string">&quot;abcd&quot;</span>;        <span class="comment">//sizeof(str) == 4(x86) or 8(x64)，是个指针，无论什么类型的指针在32位机器上的大小均为4bytes</span></span><br></pre></td></tr></table></figure><p><strong>再然后，”abcd”叫做“字符串常量”，任何类型的常量都是右值（没有名字的临时变量），必须让”abcd”成为左值（有名字的变量），才能够修改”abcd”这个字符串。</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">char</span> str[] = <span class="string">&quot;abcd&quot;</span>;              <span class="comment">//等号两端是相同的数据类型，右值成为左值</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">char</span> * str = <span class="string">&quot;abcd&quot;</span>;             <span class="comment">//等号两端是不同的数据类型，右端自动转型成char*，该str得到了“abcd”的地址，而&quot;abcd&quot;这个char数组仍然没有名字。</span></span><br></pre></td></tr></table></figure><p>最后 char a[]=”Hello”；与char aa[8]；aa=”Hello” 的不同之处在哪，为什么第一个对，第二个错？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>     <span class="keyword">char</span> a[<span class="number">8</span>];</span><br><span class="line"><span class="number">2</span>     a=<span class="string">&quot;Hello&quot;</span>; <span class="comment">//error C2440: &#x27;=&#x27; : cannot convert from &#x27;const char [6]&#x27; to &#x27;char [8]&#x27;</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">char</span> aa[<span class="number">8</span>]=<span class="string">&quot;hello&quot;</span>;  <span class="comment">//it&#x27;s ok</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">char</span> *aaa=<span class="string">&quot;hello&quot;</span>;  <span class="comment">//it&#x27;s ok</span></span><br><span class="line">为什么必须在定义的时候初始化呢?</span><br></pre></td></tr></table></figure><p>　  char a[8]；这样定义了一个数组后，数组名a就是个<strong>地址常量，</strong>也就是<strong>指针常量，</strong>只能指向该数组在内存地址空间中的首地址。不可以再指向别的地址。所以如果a = “hello”;就是把文字常量区的字符数组”hello”的首地址赋给地址常量a，这是不允许的。<br>   如果写成char aa[8] = “hello”;这就是在定义数组a的时候就对其初始化，把”hello”串的每个字符赋值给数组a的元素,在这里存在一个拷贝的过程。这是合理的。</p><p>   char *aaa=”Hello”;也定义了一个指针，而该指针可以指向文字常量区的字符数组”Hello”的首地址，也可以指向文字常量区的字符数组”world”的首地址。</p><p>转载于<a href="https://blog.csdn.net/hackbuteer1/article/details/670656">https://blog.csdn.net/hackbuteer1/article/details/670656</a><br>            <a href="https://www.cnblogs.com/aheng123/p/5299592.html">https://www.cnblogs.com/aheng123/p/5299592.html</a></p><p>3.假设二叉树采用二叉链存储结构存放，结点值为 int 类型，设计一个递归算法求二叉树 bt 中所有叶子结点值之和</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode *<span class="title">CreateBTree</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> root = a[<span class="number">0</span>];</span><br><span class="line">BTNode *bt = (BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">bt-&gt;data = root;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[k]==root)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">bt-&gt;lchild = CreateBTree(a+<span class="number">1</span>,b,k);</span><br><span class="line">bt-&gt;rchild = CreateBTree(a+k+<span class="number">1</span>,b+k+<span class="number">1</span>,n-k<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> bt;</span><br><span class="line">&#125;<span class="comment">//二叉树bt</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LeafSum</span><span class="params">(BTNode *bt)</span> <span class="comment">//二叉树 bt 中所有叶子结点值之和 </span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">if</span> (bt==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (bt-&gt;lchild==<span class="literal">NULL</span> &amp;&amp; bt-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> bt-&gt;data;</span><br><span class="line"><span class="keyword">int</span> lsum=LeafSum(bt-&gt;lchild);</span><br><span class="line"><span class="keyword">int</span> rsum=LeafSum(bt-&gt;rchild);</span><br><span class="line"><span class="keyword">return</span> lsum+rsum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBTree</span><span class="params">(BTNode *bt)</span>  <span class="comment">//以括号表示法输出二叉树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bt!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,bt-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (bt-&gt;lchild!=<span class="literal">NULL</span> || bt-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            DispBTree(bt-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span> (bt-&gt;rchild!=<span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            DispBTree(bt-&gt;rchild);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    BTNode *bt;</span><br><span class="line">    <span class="keyword">int</span> a[]=&#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>&#125;; <span class="comment">//先序</span></span><br><span class="line">    <span class="keyword">int</span> b[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;; <span class="comment">//中序</span></span><br><span class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    bt=CreateBTree(a,b,n); <span class="comment">//由a和b构造二叉链bt</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树bt:&quot;</span>); DispBTree(bt); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;所有叶子结点值之和: %d\n&quot;</span>,LeafSum(bt));</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="comment">//DestroyBTree(bt); //销毁树bt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>给定二叉树的先序序列和中序序列构建二叉链表</strong></p><p>先(根)序遍历（根左右）<br>中(根)序遍历（左根右）<br>后(根)序遍历（左右根）</p><p>过程:</p><ol><li>先在先序子序列中找到当前子树的根节点，即先序子序列的第一个节点就是当前子树根节点</li><li>在中序子序列中找到当前根节点的位置，并返回下标</li><li>根据中序子序列中的当前子树根节点的位置，得到子树的左子树和右子树</li><li>根据当前子树的左右子树，分别得到其在先序子序列和中序子序列中的开始索引和结束索引</li><li>根据得到的索引，判断左右子树是否为空，如果不为空则返回第一步继续执行，如果为空直接返回。</li></ol><p><img src="https://raw.githubusercontent.com/Orig1nation/Photo/master/Note/20210506174401.png"></p><h4 id="4-逆置单链表"><a href="#4-逆置单链表" class="headerlink" title="4.逆置单链表"></a>4.逆置单链表</h4><p>对不不带头结点的单链表L</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表</span></span><br><span class="line"><span class="comment"> * 迭代实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseListByIter</span><span class="params">(ListNode p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == null || p.next == null)&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// work为工作指针，跟随p的变化而变化</span></span><br><span class="line"> </span><br><span class="line">    ListNode pre = null;</span><br><span class="line">    ListNode work = p;</span><br><span class="line">    <span class="keyword">while</span> (work != null)&#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">        <span class="comment">// 更改指针指向，从后面的节点(work)指向步调慢的前驱节点(pre)</span></span><br><span class="line">        work.next = pre;</span><br><span class="line">        <span class="comment">// 保证跳出循环后，pre一定是尾结点</span></span><br><span class="line">        pre = work;</span><br><span class="line">        work = p;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 已经遍历到p，work都为null，此时pre为指向最后一个节点(逆置后的头结点)</span></span><br><span class="line">    p = pre;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 翻转链表</span></span><br><span class="line"><span class="comment"> * 递归实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == null || p.next == null)&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 递归的含义是逆置p.next为头结点的链表，并返回新链表的头指针</span></span><br><span class="line">    ListNode newNode = reverseList(p.next);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 此时p还是指向没逆置的第二个节点的,即该节点为p.next</span></span><br><span class="line">    <span class="comment">// 但逆置后第二个节点变成了倒数第二个节点，p此时是倒数第一个节点</span></span><br><span class="line">    <span class="comment">// 倒数第二个节点该指向p 所以是p.next.next = p</span></span><br><span class="line">    <span class="comment">// p为尾结点后当然p的指针域为null，所以p.next = null</span></span><br><span class="line">    <span class="comment">// 此时一定是newNode为新的头结点</span></span><br><span class="line">    p.next.next = p;</span><br><span class="line">    p.next = null;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表的前k个节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 用于记录第k+1个节点的位置</span></span><br><span class="line"><span class="keyword">private</span> ListNode pNext = null;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseK</span><span class="params">(ListNode p, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</span><br><span class="line">        pNext = p.next;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ListNode newNode = reverseK(p.next, k - <span class="number">1</span>);</span><br><span class="line">    p.next.next = p;</span><br><span class="line">    p.next = pNext;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 逆置[m,n]范围内的节点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode p, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> reverseK(p, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 相当于往前推进了一步</span></span><br><span class="line">    p.next = reverseBetween(p.next, m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考<br><a href="https://blog.csdn.net/weixin_43570233/article/details/104987595">https://blog.csdn.net/weixin_43570233/article/details/104987595</a></p><p>5.判断两棵二叉树是否同构</p><h4 id="6-求解回文序列问题"><a href="#6-求解回文序列问题" class="headerlink" title="6.求解回文序列问题"></a>6.求解回文序列问题</h4><p>如果一个数字序列逆置之后跟原序列是一样的就称这样的数字序列为回文序列。例如：<br>{1, 2, 1}, {15, 78, 78, 15} , {112} 是回文序列,<br>{1, 2, 2}, {15, 78, 87, 51} ,{112, 2, 11} 不是回文序列。<br>现在给出一个数字序列，允许使用一种转换操作：<br>选择任意两个相邻的数，然后从序列移除这两个数，并用这两个数字的和插入到这两个数之前的位置(只插入一个和)。<br>现在对于所给序列要求出最少需要多少次操作可以将其变成回文序列。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">huiwen</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left=<span class="number">1</span>,right=n;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[left]&lt;a[right])</span><br><span class="line">&#123;</span><br><span class="line">a[left+<span class="number">1</span>]+=a[left];</span><br><span class="line">sum++;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[left]==a[right])</span><br><span class="line">&#123;</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[right<span class="number">-1</span>]+=a[right];</span><br><span class="line">sum++;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;huiwen(a,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_43539664/article/details/108955300">https://blog.csdn.net/qq_43539664/article/details/108955300</a></p><h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><p>1.求解最大整数乘法问题</p><p>2.求解查找假币问题</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            <span class="comment">//余数为1或2对(n/3)+1继续进行三分</span></span><br><span class="line">            n = n/<span class="number">3</span> + (n%<span class="number">3</span> &gt; <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/rmy020718/p/9443128.html">https://www.cnblogs.com/rmy020718/p/9443128.html</a><br><a href="https://www.cnblogs.com/shine-yr/p/5214873.html">https://www.cnblogs.com/shine-yr/p/5214873.html</a></p><p>3.求解众数问题</p><p><a href="https://blog.csdn.net/MSTZhang/article/details/52971092">https://blog.csdn.net/MSTZhang/article/details/52971092</a><br><a href="https://www.cnblogs.com/pprp/p/9688481.html">https://www.cnblogs.com/pprp/p/9688481.html</a></p><h3 id="蛮力法"><a href="#蛮力法" class="headerlink" title="蛮力法"></a>蛮力法</h3><p>1.快排 冒泡</p><p>2.字符串匹配</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BF</span><span class="params">(<span class="built_in">string</span> s,<span class="built_in">string</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>; <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;s.length()&amp;&amp;j&lt;t.length())</span><br><span class="line">&#123;<span class="keyword">if</span>(s[i]==t[j])</span><br><span class="line">&#123;i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">i=i-j+<span class="number">1</span>;<span class="comment">//i退回原来i的下一个位置</span></span><br><span class="line">j=<span class="number">0</span>;<span class="comment">//j从0零开始重新比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==t.length())<span class="comment">//t的字符串比较完毕</span></span><br><span class="line"><span class="keyword">return</span> i-j;  <span class="comment">//t是s的字串 返回位置</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int length()&#123;</span></span><br><span class="line"><span class="comment">//int x=0;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>],b[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;BF(a,b);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.求解最大连续子序列之和问题</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">int</span> maxSum=<span class="number">0</span>,thisSum;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;thisSum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k=i;k&lt;=j;k++)</span><br><span class="line">thisSum+=a[k];</span><br><span class="line"><span class="keyword">if</span>(thisSum&gt;maxSum)</span><br><span class="line">maxSum=thisSum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">-2</span>,<span class="number">11</span>,<span class="number">-4</span>,<span class="number">13</span>,<span class="number">-5</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> b[]=&#123;<span class="number">-6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">-7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">-9</span>,<span class="number">10</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m=<span class="keyword">sizeof</span>(b)/<span class="keyword">sizeof</span>(b[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld,%ld&quot;</span>,maxSubSum(a,n),maxSubSum(b,m));</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.求解钱币兑换问题</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,sum,i;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>,sum=<span class="number">0</span>;i&lt;=n/<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;(n-3*i)/2&lt;&lt;(n-i*3-(n-3*i))&lt;&lt;endl;</span></span><br><span class="line">sum+=(n<span class="number">-3</span>*i)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.求解环绕问题</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/surrounded-regions/solution/bei-wei-rao-de-qu-yu-dfswang-ge-lei-wen-si741/">https://leetcode-cn.com/problems/surrounded-regions/solution/bei-wei-rao-de-qu-yu-dfswang-ge-lei-wen-si741/</a></p><h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><p>1.简单装载问题</p><p><a href="https://blog.csdn.net/cong____cong/article/details/103384237">https://blog.csdn.net/cong____cong/article/details/103384237</a></p><h3 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h3><p>课本 求解背包问题</p><p>1.求解硬币问题</p><p>有1元、5元、10元、50元、100元、500元的硬币各C1，C5，C10，C50，C100，C500枚。现在要用这些硬币来支付A元，最少需要多少枚硬币？</p><p>贪心法为了尽少的使用硬币应该有限考虑使用大面额的硬币</p><p>课后题答案</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>2.求解汽车加油问题</p><p>只要在每个加油站进行检测即可，检测内容就是油箱里的油能不能支撑汽车行驶到下一个加油站。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;<span class="comment">//定义n和k。</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>];<span class="comment">//定义数组保存各个加油站之间的距离。</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="comment">//定义加油次数。</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;<span class="comment">//输入n和k。</span></span><br><span class="line">    <span class="keyword">int</span> r=n;<span class="comment">//定义一个存储油箱内油量的变量。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[k-i];</span><br><span class="line">    &#125;          <span class="comment">//输入每个加油站之间的距离。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=r)&#123;</span><br><span class="line">            r=r-a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            r=n-a[i];</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;<span class="comment">//输出结果</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>课本 管道修建问题 贝博那切数列</p><p>1.整数拆分问题</p><p>2.最大联系子序列和问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C</title>
      <link href="2021/01/24/C/"/>
      <url>2021/01/24/C/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong>C语言代码是如何运行起来的</strong></p><p>C语言代码-&gt;预处理-&gt;汇编-&gt;编译-&gt;链接-&gt;运行</p><ol><li><p>预处理阶段 </p><p>gcc -E hello.c -o hello.i</p><p>预处理器会将我们 C 源代码中的所有宏定义（带 # 符号的语句）进行替换。</p></li><li><p>编译阶段 </p><p>gcc -S hello.i -o hello.s</p><p>在编译阶段，编译器会将刚才经过预处理器处理过的文件进行编译，将 C 代码（高级语言）翻译成汇编语言代码（低级语言）。</p></li><li><p>汇编阶段</p><p>gcc -c hello.s -o hello.o</p><p>生成了 hello.o 文件（该文件是可重定位目标文件），这里如果我们再用文本编辑软件打开该文件，会发现一堆乱码，因为现在该文件已经是二进制文件，文本编辑软件只能查看文本文件，如果按照文本解析的方式解析二进制文件就会产生乱码。在预处理、编译阶段，我们都可以查看其生成的文件，只有在汇编这一步打开会产生乱码，我们可以知道，汇编器将汇编语言代码翻译成二进制文件。因为计算机只能执行二进制文件。</p></li><li><p>链接阶段</p><p>链接就是负责把我们在源代码中调用的函数从它定义的文件中加载过来。例如print（）函数，他就是在标准库中定义的，我们写 hello.c 源代码时没有对它进行定义，只对它进行调用，C 程序不认识这个函数，想要让 C 程序认识这个函数就必须找到它定义的位置，就需要通过链接。</p><p> 最后就可以运行了</p></li></ol><p>参考<a href="https://blog.csdn.net/s1998f/article/details/103575961">https://blog.csdn.net/s1998f/article/details/103575961</a></p><p><strong>在C语言中的声明、定义、初始化、赋值</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">  extern   int a;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> int a;//定义变量a，执行后就已经建立存储空间</p><p>extern int a;//只是声明了变量a存在，当查找变量a的内存地址时，会返回CXX0017: 错误: 没有找到符号“a”</p><p>在函数中也是类似</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void fun1();  &#x2F;&#x2F;函数声明</span><br><span class="line"></span><br><span class="line">void fun1()&#123;  &#x2F;&#x2F;函数定义</span><br><span class="line">    cout&lt;&lt;&quot;fun1&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C语言中的内存分配</strong></p><p>内存分配的两种方式：堆和栈。</p><p>int i ;这样的声明就立刻在栈里分配了内存空间。<br>int *i; 这样的声明就立刻在栈里给这个指针（指针本身）分配了空间。<br>i = malloc(100); 这句是在堆里分配空间并且把这个空间地址记录在i这个变量在栈里的地址那</p><p><img src="https://raw.githubusercontent.com/Orig1n4tion/Photo/master/Note/20210111100925.png"></p><p>可以看到int a;之后，在VS中的可以找到a的内存地址，并且a的值为-858993460，即为0xcccccccc的十进制表示<br>原因：未初始化的栈区编译器默认(在VS2010下)都按照cc去填充了。另外补充，在gcc编译器则是按照0填充的</p><p>也就说（在VS2010）声明变量的时候就完成了内存地址的分配，只是变量的值按照0xcccccccc填充</p><p>变量在内存中的分配</p><p><a href="https://www.cnblogs.com/bingdaocaihong/p/6949891.html">https://www.cnblogs.com/bingdaocaihong/p/6949891.html</a><br><a href="https://blog.csdn.net/chenyiming_1990/article/details/9476181">https://blog.csdn.net/chenyiming_1990/article/details/9476181</a></p><p><strong>数据在内存中的存储</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>] = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#X, %#X\n&quot;</span>, &amp;a, str);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c语言中%x的意思是16进制输出</span></span><br><span class="line"><span class="comment">//c语言中符合%#的意思是带格式输出。比如，%#x的意思是在输出前面加上0x，%#b的意思是在输出前面加上0b。</span></span><br></pre></td></tr></table></figure><p>运行结果，返回变量a与str的内存地址<br>0X10FFA68, 0X10FFA4C，反复运行发现地址是随机的</p><p><img src="https://raw.githubusercontent.com/Orig1n4tion/Photo/master/Note/20210111110436.png"></p><p>定义一个整型变量a，赋值为100。在地址栏中对a进行取地址操作，就可以得到a在内存中的存储情况。</p><p>a在内存中按照十六进制存储。a的地址就是0X10FFA68，00的地址就是0X10FFA69，以此类推。这种高位在左，低位在右的排列方式称为<strong>小端字节序</strong>。</p><p><strong>字节序</strong></p><p>字节序就是研究数字的高位在内存的高地址还是低地址。小端字节序就是高位放在高地址，大端字节序就是高位放在低地址。可以用小（低位）小（低地址）小（小端）来记忆。一台机器的字节序取决于CPU，小端字节序在PC上是主流。</p><p><strong>原码、反码、补码</strong></p><p>若是正数，则按照原码来存；若是负数，则按照补码的方式来存。也可以理解成正数的补码就是自身。补码存在的意义在于把加法和减法统一成加法，使硬件实现更简单。<br>  原码-&gt;取反+1-&gt;补码<br>  补码-&gt;取反+1-&gt;原码</p><p>在二进制中，收尾为1的为负数</p><p><strong>浮点数在内存中的存储</strong></p><p>单精度浮点数存储模型</p><p><img src="https://raw.githubusercontent.com/Orig1n4tion/Photo/master/Note/20210111111504.png"></p><p>S是符号位，0表示正，1表示负。E是指数部分，M是有效数字。M占用的bit位越多，数据的精度就越高；E占用的bit位越多，数据的范围就越大。<br>由于double类型的精度和范围均比float大，实际开发中优先考虑使用double。</p><p>由于浮点数在内存中存储，很多时候有误差，故实际开发中，不能在浮点数之间使用==进行比较。</p><p><strong>字符指针</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str1[] = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* str3 = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* str4 = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处数组本来是不能直接比较的. </span></span><br><span class="line"><span class="comment">// 但是指针可以. 此处数组名又隐式转成指针了. </span></span><br><span class="line"><span class="keyword">if</span> (str1 == str2) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;相等\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不相等\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str3 == str4) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;相等\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不相等\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现第一个不相等，第二个相等。首先明确，进行比较的是地址，而不是字符串的内容。str1和str2所指向的字符串虽然内容相同，但是地址不同，故比较地址时输出不相等。而str3和str4都指向”hehe”这个字符串，所以存储了同一个地址，故相等。<br>注意：C语言中，想要比较字符串的内容，不能直接使用==，而要使用strcmp函数。</p><p><strong>指针数组和数组指针</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指针数组</span></span><br><span class="line"><span class="keyword">int</span>* arr[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//数组指针</span></span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>(*p)[<span class="number">4</span>] = &amp;arr2;</span><br></pre></td></tr></table></figure><p>指针数组是数组，数组里存储的元素全部是指针。数组指针是指针，这个指针指向一整个数组，即&amp;arr2+1是整个数组的长度。</p><p>数组作为函数参数时，有两种传参方式：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> (*p)[<span class="number">5</span>])</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//若 int a[5]，a的类型就是int*</span></span><br><span class="line"><span class="comment">//若 int a[3][5]，a的类型就是int(*)[5]</span></span><br><span class="line"><span class="comment">//若 int a[2][3][5]，a的类型就是int(*)[3][5],以此类推。</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/th15t13/article/details/109642874">数据在内存中的存储和指针进阶</a></p><p><strong>C语言中<code>-858993460</code>的由来。</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Orig1nation/Photo/master/Note/20210507085420.png"></p><p>在代码实例中，我们很明显可以看出，C编译器，定义变量的<code>栈空间</code>填充的值默认是<code>CC</code>，因为<code>i</code>是一个int类型，那么即就是占四个字节。所以 ，未初始化的i填充的字节数就是 <code>0xCCCCCCCC</code>,那么输出</p><p><code>-858993460</code>又是什么鬼？，其实我们不妨把 <code>0xCCCCCCCC</code>转换为二进制看看。</p><p><code>0xCCCCCCCC</code>的二进制：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11001100110011001100110011001100</span><br></pre></td></tr></table></figure><p>了解过负数在计算机是怎么存储的同学们都知道，二进制首位 是1 ,那么就代表这是个负数，所以我们不妨求其反码：(符号位不变，其他位取反)</p><p>原码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11001100110011001100110011001100</span><br></pre></td></tr></table></figure><p>反码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10110011001100110011001100110011</span><br></pre></td></tr></table></figure><p>再求其补码：（反码的基础上+1）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10110011001100110011001100110100</span><br></pre></td></tr></table></figure><p>那么这个数，再计算机内存的二进制即就是上面的补码，我们可以转换为十进制，答案就是 <code>-858993460</code></p><p>还有就是变量str出现了烫，其实跟乱码没有关系，乱码是解码跟编码不同才会乱码，因为 中文 烫的 16进制刚好就是 <code>0xCCCC</code>;可以检查下程序哪里数组越界或者字符串是不是‘\0’结尾的。</p><h3 id="零零碎碎"><a href="#零零碎碎" class="headerlink" title="零零碎碎"></a>零零碎碎</h3><p><strong>冯·诺依曼架构</strong></p><p>数学家冯·诺依曼提出<strong>了计算机制</strong>造的三个基<em>本原则</em>，即采用二进制逻辑、程序存储执行以及计算机由五个部分组成（运算器、控制器、存储器、输入设备、输出设备），这套理论被称为冯·诺依曼体系结构。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想象一下我们在做数学考试：</span><br><span class="line"></span><br><span class="line">输入设备就是考卷，题目都在卷子上。同样的计算机要计算哪些数据，怎么计算，都来自于输入设备。</span><br><span class="line">内存就是草稿纸，我们会把要计算的题目抄写到草稿纸上，用草稿纸记录计算的中间过程。同样的，计算机要把来自输入设备的数据，以及要怎么计算这些数据的指令，从输入设备载入到内存中，并且把每一步计算的结果写入到内存。</span><br><span class="line">运算单元是计算器，我们用计算器来计算每一步的加减乘除。同样的，计算机有专用的运算单元，来计算数据。（假设这次数学考试允许带计算器）</span><br><span class="line">控制单元就是我们自己了。我们根据试卷上的算式，来决定第一步是算乘法还是加法，乘法是哪两个数相乘，加法又是哪两个数相加。</span><br><span class="line">输出设备就是答题卡。我们计算完一道题后，需要把草稿纸上的结果抄写在答题卡上。</span><br><span class="line">其中，我们自己+计算器的组合，在计算机里面是同一个设备——CPU（Central Processing Unit，中央处理器）。</span><br></pre></td></tr></table></figure><p><strong>CPU、内存</strong></p><p>CPU，全称中央处理器。</p><p>CPU可以直接访问存储在内存中的数据。不可以直接访问存储在外存中的数据，外存数据必须先读进内存再供CPU访问。</p><p>内存，也称为主存储器和内存储器。是外存与CPU进行沟通的桥梁，<em>计算机所处理的数据都要经过内存</em>，也就是说计算中的所有程序都是在内存中进行的。起作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。</p><p>计算机运行一个程序时，优先调用并执行一部分必要的程序，在需要其他数据的时候便从硬盘 或者硬盘缓存，或者内存缓冲区读取数据，以供程序运行。</p><p><strong>缓冲区（Buffer）与缓存（Cache）</strong></p><p>缓存：将缓慢的访问结果保存下来。<br>缓冲：将突发快速的访问平稳下来。</p><p>缓冲区(Buffer)就是在<strong>内存</strong>中预留指定大小的存储空间用来对I/O的数据做临时存储，这部分预留的内存空间叫缓冲区。</p><p>缓冲区存在的意义：高速设备与低速设备的不匹配，势必会让高速设备花时间等待低速设备，我们可以在这两者之间设立一个缓冲区。</p><p>缓存</p><p>缓存在CPU、硬盘、浏览器中都有应用。</p><p>CPU的Cache，中文名称是高速缓冲存储器，读写速度很快，几乎与CPU一样。由于CPU的运算速度太快，内存的数据存取速度无法跟上CPU的速度，所以在cpu与内存间设置了cache为cpu的数据快取区。</p><p>磁盘也有cache,硬盘的cache作用就类似于CPU的cache，它解决了总线接口的高速需求和读写硬盘的矛盾以及对某些扇区的反复读取。</p><p>浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览，并且可以减少服务器的压力。这个过程与下载非常类似，不过下载是用户的主动过程，并且下载的数据一般是长时间保存，游览器的缓存的数据只是短时间保存，可以人为的清空</p><p><strong>数据类型</strong></p><p><strong>在C语言中的声明、定义、初始化、赋值</strong></p><p> int a;是声明变量。</p><p>赋值就是 变量 = 某个值。</p><p>声明变量的时候同时赋值，叫初始化，也就是说初始化=声明+赋值。</p><p><strong>进制</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">十六进制 hexadecimal 0x或0X开头</span><br><span class="line"></span><br><span class="line">八进制 octal 0开头</span><br><span class="line"></span><br><span class="line">二进制 binary 0b或0B开头</span><br><span class="line"></span><br><span class="line">十进制 decimal 无标志</span><br><span class="line"></span><br><span class="line">至于为什么十六进制前缀是0x，就是这么规定的</span><br><span class="line">[0]是便于解释器的识别，[x]是十六进制的标志，可能是hex吧</span><br></pre></td></tr></table></figure><p><strong>C语言中的%</strong></p><p>有两种释义。一是求余，经常会用到判断一个数是不是能被另一个整除；二是引导符，用于引导输入输出项表列的格式，例如%#X，引导输出以0X为前缀的字符串。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p><strong>为什么需要指针？</strong></p><p>指针解决了一些编程中基本的问题。</p><p>第一，指针的使用使得不同区域的代码可以轻易的共享内存数据。当然你也可以通过数据的复制达到相同的效果，但是这样往往效率不太好，因为诸如结构体等大型数据，占用的字节数多，复制很消耗性能。但使用指针就可以很好的避免这个问题，因为任何类型的指针占用的字节数都是一样的（根据平台不同，有4字节或者8字节或者其他可能）。</p><p>第二，指针使得一些复杂的链接性的数据结构的构建成为可能，比如链表，链式二叉树等等。</p><p>第三，有些操作必须使用指针。如操作申请的堆内存。</p><p><strong>什么是指针？</strong></p><p><em>指针是程序数据在内存中的地址，而指针变量是用来保存这些地[址的变量。</em></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>] = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#X, %#X\n&quot;</span>, &amp;a, str);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c语言中%x的意思是16进制输出</span></span><br><span class="line"><span class="comment">//c语言中符合%#的意思是带格式输出。比如，%#x的意思是在输出前面加上0x，%#b的意思是在输出前面加上0b。</span></span><br></pre></td></tr></table></figure><p>运行结果，返回变量a与str的内存地址<br>0X12FFEA0, 0X12FFE84</p><p><img src="https://raw.githubusercontent.com/Orig1n4tion/Photo/master/DS/20210108231700.png"></p><p><a href="https://www.zhihu.com/question/29882140/answer/45914872">指针变量为什么加前缀p?</a><br><a href="http://c.biancheng.net/c/80/">http://c.biancheng.net/c/80/</a><br><a href="https://www.cnblogs.com/lulipro/p/7460206.html">https://www.cnblogs.com/lulipro/p/7460206.html</a></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>； </span><br><span class="line"><span class="keyword">int</span> &amp;amp;b=a；引用：必须在定义的时候初始化，无空引用，且引用不分等级。 </span><br></pre></td></tr></table></figure><h3 id="1、从内存上分配看"><a href="#1、从内存上分配看" class="headerlink" title="1、从内存上分配看"></a>1、从内存上分配看</h3><p>指针：指向具体的内存空间，是间接访问变量，指针自身消耗内存空间<br>其指向1.可变的（除非用了const）2.不一定存在，如空指针NULL<br>引用：【不用分配内存区域—引用（别名而已）的地址其实就是被引用对象的地址】必须一开始就指向一个存在的对象（创建时必须初始化，不能为空）</p><h3 id="2、从编译上看"><a href="#2、从编译上看" class="headerlink" title="2、从编译上看"></a>2、从编译上看</h3><p><strong>程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址等【符号表生成后不再改变】</strong> 故指针的名字和指针的地址不能改变，但是指针中地址空间内存放的地址能够改变（指针变量的值可以改） 而引用指向的不能改。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a；</span><br><span class="line"><span class="keyword">int</span> *p=&amp;amp;a；<span class="comment">//指针有自己的指针名字和地址，存储了指向对象的地址（可以更改→指向别的对象的地址）</span></span><br><span class="line"><span class="keyword">int</span> &amp;amp;b=a；<span class="comment">//引用即别名（一旦声明则不可变更） 引用b和被引用的a用同一个地址：符号表中2个变量名指向同一个地址</span></span><br><span class="line">（<span class="keyword">int</span> &amp;amp;b=a和<span class="keyword">int</span>* <span class="keyword">const</span> pp=&amp;amp;a；一样不能改变指向的对象，但能改变指向对象的值）</span><br><span class="line"><span class="comment">//不同在于b的地址就是a的地址       即&amp;amp;b == &amp;amp;a</span></span><br><span class="line"><span class="comment">//而pp有自己的地址 pp存放了a的地址 即pp == &amp;amp;a</span></span><br><span class="line">符号表存放内容：变量名变量地址     【符号表生成后不再改变】</span><br><span class="line"><span class="keyword">int</span> aaa的地址</span><br><span class="line">指针p：指针名指针地址    而指针指向的a地址（存放的数据）可以改变【不安全】</span><br><span class="line">引用b：引用名b引用对象a的地址→→→故引用对象不能改变【安全】</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、在函数作传参使用"><a href="#3、在函数作传参使用" class="headerlink" title="3、在函数作传参使用"></a>3、在函数作传参使用</h3><p>传递一个引用→→必然存在且有效【安全但没有指针快，一个地址总比复杂数据传递快】 传递一个指针→→指针不一定有效【需要判断所传递指针是否非空】  </p><p>转载于<a href="https://blog.csdn.net/qq_42024067/article/details/107520230">https://blog.csdn.net/qq_42024067/article/details/107520230</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/24/hello-world/"/>
      <url>2021/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hey~</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
